MODULE VentilationDuctOrder;

REQUIRE Time, MetaNumerator, Employee, Company, DateUtils, FileUtils, MetaTax;

NAMESPACE Ventilation;

// Определение классов
CLASS Order 'Заказ на вентиляционные трубы';
CLASS OrderLine 'Строка заказа на вентиляционные трубы';
CLASS OrderEvent 'Событие заказа';

// Поля для заказов
number 'Номер заказа' = DATA STRING[20] (Order) NONULL;
date 'Дата заказа' = DATA DATE (Order) NONULL;
customer 'Покупатель' = DATA BPSTRING[100] (Order);
company 'Компания' = DATA BPSTRING[100] (Order);
deliveryAddress 'Адрес доставки' = DATA BPSTRING[255] (Order);
scheduledDate 'Плановая дата доставки' = DATA DATE (Order);

// Поле для связи заказов и событий
orderEvent 'Событие заказа' = DATA OrderEvent (Order) NONULL;

// Поля для строк заказа
event 'Событие строки' = DATA OrderEvent (OrderLine) NONULL DELETE;
ductType 'Тип воздуховода' = DATA BPSTRING[100] (OrderLine);
ductQuantity 'Количество' = DATA NUMERIC[10,2] (OrderLine);
ductPrice 'Цена за единицу' = DATA NUMERIC[10,2] (OrderLine);
totalPrice 'Общая стоимость' (OrderLine l) = ductQuantity(l) * ductPrice(l);

// Добавление порядкового номера строк заказа
index '№' = PARTITION SUM 1 ORDER OrderLine l BY event(l) IN id MATERIALIZED CHARWIDTH 3;

// Определение текущего заказа и текущего события для использования в других формах
currentOrder() = DATA Order();
currentEvent() = DATA OrderEvent();

// Команда для создания события и привязки его к заказу
assignEvent (Order o) {
    IF NOT orderEvent(o) THEN {
        NEW e = OrderEvent {
            orderEvent(o) <- e;
        };
        MESSAGE 'Создано новое событие для заказа ' + number(o);
    }
    IF orderEvent(o) THEN {
        currentEvent() <- orderEvent(o);  // Устанавливаем текущее событие для заказа
        MESSAGE 'Текущее событие установлено для заказа ' + number(o);
    } ELSE {
        MESSAGE 'Не удалось установить событие для заказа ' + number(o);
    }
}

// Форма для просмотра/редактирования заказа
FORM order 'Заказ на вентиляционные трубы'
    OBJECTS o = Order PANEL
    PROPERTIES(o) number, date, customer, company, scheduledDate, deliveryAddress, orderEvent READONLY

    OBJECTS l = OrderLine
    PROPERTIES(l) index, ductType, ductQuantity, ductPrice, totalPrice READONLY, event READONLY
    PROPERTIES(l) NEWSESSION NEW, DELETE, EDIT
    FILTERS event(l) = orderEvent(o)  // Отображаем только строки, которые связаны с событием текущего заказа

    EDIT Order OBJECT o
    EVENTS
        ON INIT {
            assignEvent(o);  // Создаем событие и привязываем его к заказу, если еще не создано
            currentOrder() <- o;
            currentEvent() <- orderEvent(o);
            MESSAGE 'Событие успешно создано и привязано к заказу ' + number(o);
        }
;

// Форма для редактирования строки заказа
FORM orderLine 'Строка заказа на вентиляционные трубы'
    OBJECTS l = OrderLine PANEL
    PROPERTIES(l) ductType, ductQuantity, ductPrice, event READONLY
    EDIT OrderLine OBJECT l
    EVENTS
        ON INIT {
            IF currentOrder() THEN {
                event(l) <- orderEvent(currentOrder());  // Связываем строку с событием заказа
                MESSAGE 'Строка заказа связана с событием ' + orderEvent(currentOrder());
            } ELSE {
                MESSAGE 'Не удалось связать строку заказа с событием';
            }
        }
;

// Форма для списка заказов
FORM orders 'Заказы на вентиляционные трубы'
    OBJECTS o = Order
    PROPERTIES(o) number, date, customer, company, scheduledDate, deliveryAddress
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

// Навигатор
NAVIGATOR {
    NEW orders FIRST;  // Форма списка заказов будет открываться первой в навигаторе
}
