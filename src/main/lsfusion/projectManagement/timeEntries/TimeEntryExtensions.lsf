MODULE TimeEntryExtensions;

REQUIRE Time, TimeEntry, Project, ProjectTimeEntry, TimeEntryHours, ItemSales, Employee, Category, ItemCost, Security;

NAMESPACE ProjectManagement;

// Класс для строк описания времени работы
CLASS WorkEntryLine;

// Свойства: начало работы, конец работы, описание
startTime 'Начало работы' = DATA TIME (WorkEntryLine);
endTime 'Окончание работы' = DATA TIME (WorkEntryLine);
description 'Описание работы' = DATA TEXT (WorkEntryLine);

// Рассчитываем количество часов работы
workHours 'Часы работы' = NUMERIC[16,2] 
    ((extractHour(endTime(w)) * 3600 + extractMinute(endTime(w)) * 60 + extractSecond(endTime(w))) -
        (extractHour(startTime(w)) * 3600 + extractMinute(startTime(w)) * 60 + extractSecond(startTime(w)))) / 3600
        IF startTime(w) AND endTime(w);


// Инициализация сотрудника при создании новой записи
employee(TimeEntry t) <- currentUser() WHEN SET(t IS TimeEntry);

// Проверяем, является ли текущий пользователь администратором
isAdminT 'Администратор?' (User u) =
    GROUP SUM 1 IF (userRoles(u) = 'Администратор' OR userRoles(u) = 'admin');

// Добавляем поле для связи с родительской отметкой
parentEntry 'Родительская отметка' = DATA TimeEntry (TimeEntry);

// Добавляем поля для процентов и дополнительных сотрудников
percent 'Процент' = DATA NUMERIC[5,2] (TimeEntry);
employee2 'Сотрудник 2' = DATA Employee (TimeEntry);
percent2 'Процент 2' = DATA NUMERIC[5,2] (TimeEntry) NONULL;
employee3 'Сотрудник 3' = DATA Employee (TimeEntry);
percent3 'Процент 3' = DATA NUMERIC[5,2] (TimeEntry) NONULL;
employee4 'Сотрудник 4' = DATA Employee (TimeEntry);
percent4 'Процент 4' = DATA NUMERIC[5,2] (TimeEntry) NONULL;

// Уникальные имена для дополнительных сотрудников
nameEmployee2 'Сотрудник 2' (TimeEntry t) = MasterData.name(employee2(t));
nameEmployee3 'Сотрудник 3' (TimeEntry t) = MasterData.name(employee3(t));
nameEmployee4 'Сотрудник 4' (TimeEntry t) = MasterData.name(employee4(t));

// Поле descriptionText
descriptionText 'Описание' = DATA TEXT (TimeEntry);

// Новый класс для строк отметки времени
CLASS SharedTimeEntryLine;

// Связь строки отметки времени с записью TimeEntry через событие
entry 'Отметка времени' = DATA TimeEntry (SharedTimeEntryLine);
event 'Событие строки' = DATA TimeEntryEvent (SharedTimeEntryLine); // Добавляем событие для SharedTimeEntryLine

// Вид работ (номенклатура)
workType 'Вид работ' = DATA Item (SharedTimeEntryLine) NONULL;
nameWorkType 'Вид работ' (SharedTimeEntryLine l) = MasterData.name(workType(l));

// Связываем строку WorkEntryLine с объектом TimeEntry через событие
workEntry 'Отметка времени' = DATA TimeEntry (WorkEntryLine);
workEvent 'Событие отметки (работы)' = DATA TimeEntryEvent (WorkEntryLine); // Привязываем WorkEntryLine к событию

// Количество единиц работы
quantity 'Количество' = DATA NUMERIC[16,3] (SharedTimeEntryLine);

// Цена за единицу работы (подтягивается из себестоимости)
price 'Цена' = DATA NUMERIC[10,2] (SharedTimeEntryLine);

// Общая стоимость строки (количество * цена)
totalCost 'Общая стоимость' (SharedTimeEntryLine l) = quantity(l) * price(l);

// Логика для присвоения плановой себестоимости
defaultPrice 'Цена по умолчанию' (SharedTimeEntryLine l) =
    CASE
        WHEN cost(workType(l), currentDate()) THEN cost(workType(l), currentDate())
        ELSE 100;

// Присваиваем себестоимость по умолчанию при выборе вида работ
WHEN LOCAL SETCHANGED(workType(SharedTimeEntryLine l)) AND NOT CHANGED(price(l)) DO
    price(l) <- defaultPrice(l);

// Новый класс для события отметки времени
CLASS TimeEntryEvent 'Событие отметки времени';

// Поле descriptionEvent для описания события
descriptionEvent 'Описание события' = DATA TEXT (TimeEntryEvent);




// Проверка на уникальность сотрудников в записи времени
CONSTRAINT
    employee2(t) = employee(t) OR
        employee3(t) = employee(t) OR employee3(t) = employee2(t) OR
        employee4(t) = employee(t) OR employee4(t) = employee2(t) OR employee4(t) = employee3(t)
    MESSAGE 'Сотрудники не могут быть одинаковыми в одной записи времени';

// Проверка: сумма процентов сотрудников 2, 3 и 4 не должна превышать 100%
CONSTRAINT percent2(t) + percent3(t) + percent4(t) > 100
    MESSAGE 'Сумма процентов для сотрудников 2, 3 и 4 не может превышать 100%';

// Процент для первого сотрудника
percent(t) <- 100 - (percent2(t) + percent3(t) + percent4(t))
    WHEN NOT (percent2(t) == NULL OR percent3(t) == NULL OR percent4(t) == NULL)
    AND (CHANGED(percent2(t)) OR CHANGED(percent3(t)) OR CHANGED(percent4(t)));




// Обновляем свойство 'hours' для TimeEntry при изменении общего количества часов
//hours(TimeEntry t) <- totalWorkHours(t) WHEN CHANGED(totalWorkHours(t));

// Инициализация процентов сотрудников 2, 3, 4 при создании новой записи
percent2(TimeEntry t) <- 0 WHEN SET(t IS TimeEntry);
percent3(TimeEntry t) <- 0 WHEN SET(t IS TimeEntry);
percent4(TimeEntry t) <- 0 WHEN SET(t IS TimeEntry);

// Поле для хранения сотрудника, который является "Бригадиром"
brigadier 'Бригадир' = DATA Employee (TimeEntry);
brigadier(TimeEntry t) <- employee(t) WHEN CHANGED(employee(t));

// Вычисляемое свойство для отображения имени бригадира
nameBrigadier 'Бригадир' (TimeEntry t) = MasterData.name(brigadier(t));

// Логика назначения события
event 'Событие отметки времени' = DATA TimeEntryEvent (TimeEntry);
event 'Событие строки' = DATA TimeEntryEvent (WorkEntryLine); // Привязываем событие к строкам "Вид работ"

// Суммируем общее количество часов по строкам WorkEntryLine для TimeEntry
totalWorkHours 'Общее количество рабочих часов' (TimeEntry t) =
    GROUP SUM workHours(w) IF workEvent(w) = event(t);

hours(TimeEntry t) <- totalWorkHours(t) WHEN CHANGED(totalWorkHours(t));

// Общая сумма по всем строкам (Итого ФОТ)
totalWage 'Итого ФОТ' (TimeEntry t) =
    CASE
        WHEN GROUP SUM totalCost(SharedTimeEntryLine l) IF event(l) = event(t) THEN
        GROUP SUM totalCost(SharedTimeEntryLine l) IF event(l) = event(t)
        ELSE 0;

// Команда для создания события и привязки его к записи
assignEvent (TimeEntry t) {
    IF NOT event(t) THEN {
        NEW e = TimeEntryEvent {
            event(t) <- e;
            descriptionEvent(e) <- 'Событие создано';
        };
    }
}

// Связываем событие TimeEntryEvent с TimeEntry
entryEvent 'Отметка времени (событие)' = DATA TimeEntry (TimeEntryEvent);




// Определяем функцию для получения текущей записи TimeEntry
currentTimeEntry() = DATA TimeEntry(); // В контексте вашей логики это может быть любая логика получения текущей записи


// Привязываем строку WorkEntryLine к записи TimeEntry при ее создании
WHEN SET(workEntry(w)) DO {
    IF workEntry(w) == NULL THEN {
        workEntry(w) <- currentTimeEntry();
    }
}







// Вычисляем зарплату для каждого сотрудника в зависимости от процента
salary 'Зарплата' (TimeEntry t, Employee e) =
    CASE
        WHEN e = employee(t) THEN totalWage(t) * percent(t) / 100
        ELSE 0;

// Свойство для вычисления общей зарплаты по всем отметкам времени для основного сотрудника
totalSalary 'Общая зарплата' (Employee e, DATE d) =
    GROUP SUM salary(t, e) IF date(t) = d AND employee(t) = e;

// Ограничение: процент сотрудника не может быть 0, если сотрудник назначен
CONSTRAINT employee2(t) AND percent2(t) = 0
    MESSAGE 'Процент для сотрудника 2 не может быть равен 0, если сотрудник назначен';
CONSTRAINT employee3(t) AND percent3(t) = 0
    MESSAGE 'Процент для сотрудника 3 не может быть равен 0, если сотрудник назначен';
CONSTRAINT employee4(t) AND percent4(t) = 0
    MESSAGE 'Процент для сотрудника 4 не может быть равен 0, если сотрудник назначен';

// EXTEND FORM
EXTEND FORM timeEntries
    FILTERS IF isAdminT(currentUser()) THEN TRUE ELSE employee(t) = currentUser();





// Логика обновления всех связанных записей при изменении данных
// Логика обновления всех связанных записей при изменении данных
WHEN CHANGED(type(TimeEntry t)) OR CHANGED(project(t)) OR CHANGED(date(t)) AND event(t) DO {
    FOR TimeEntry relatedEntry = TimeEntry DO {
        IF event(relatedEntry) = event(t) THEN {
            type(relatedEntry) <- type(t);
            project(relatedEntry) <- project(t);
            date(relatedEntry) <- date(t);  // Обновляем дату
        }
    }
}

// Логика обновления процентов для всех связанных отметок
WHEN CHANGED(percent(TimeEntry t)) OR CHANGED(percent2(t)) OR CHANGED(percent3(t)) OR CHANGED(percent4(t))
    AND event(t) DO {
    FOR TimeEntry relatedEntry = TimeEntry DO {
        IF event(relatedEntry) = event(t) THEN {
            IF employee(t) THEN {
                IF employee(relatedEntry) = employee(t) THEN
                    percent(relatedEntry) <- percent(t);
                IF employee2(relatedEntry) = employee(t) THEN
                    percent2(relatedEntry) <- percent(t);
                IF employee3(relatedEntry) = employee(t) THEN
                    percent3(relatedEntry) <- percent(t);
                IF employee4(relatedEntry) = employee(t) THEN
                    percent4(relatedEntry) <- percent(t);
            }
            IF employee2(t) THEN {
                IF employee(relatedEntry) = employee2(t) THEN
                    percent(relatedEntry) <- percent2(t);
                IF employee2(relatedEntry) = employee2(t) THEN
                    percent2(relatedEntry) <- percent2(t);
                IF employee3(relatedEntry) = employee2(t) THEN
                    percent3(relatedEntry) <- percent2(t);
                IF employee4(relatedEntry) = employee2(t) THEN
                    percent4(relatedEntry) <- percent2(t);
            }
            IF employee3(t) THEN {
                IF employee(relatedEntry) = employee3(t) THEN
                    percent(relatedEntry) <- percent3(t);
                IF employee2(relatedEntry) = employee3(t) THEN
                    percent2(relatedEntry) <- percent3(t);
                IF employee3(relatedEntry) = employee3(t) THEN
                    percent3(relatedEntry) <- percent3(t);
                IF employee4(relatedEntry) = employee3(t) THEN
                    percent4(relatedEntry) <- percent3(t);
            }
            IF employee4(t) THEN {
                IF employee(relatedEntry) = employee4(t) THEN
                    percent(relatedEntry) <- percent4(t);
                IF employee2(relatedEntry) = employee4(t) THEN
                    percent2(relatedEntry) <- percent4(t);
                IF employee3(relatedEntry) = employee4(t) THEN
                    percent3(relatedEntry) <- percent4(t);
                IF employee4(relatedEntry) = employee4(t) THEN
                    percent4(relatedEntry) <- percent4(t);
            }
        }
    }
}

// Процедура для копирования записи для дополнительных сотрудников
// Процедура для копирования записи для дополнительных сотрудников
copyTimeEntryForAdditionalEmployees (TimeEntry t) {
    IF employee2(t) AND percent2(t) > 0 THEN {
        NEW newEntry = TimeEntry {
            date(newEntry) <- date(t);
            project(newEntry) <- project(t);
            employee(newEntry) <- employee2(t);
            event(newEntry) <- event(t);
            employee2(newEntry) <- employee(t);
            employee3(newEntry) <- employee3(t);
            employee4(newEntry) <- employee4(t);
            percent(newEntry) <- percent2(t);
            percent2(newEntry) <- percent(t);
            percent3(newEntry) <- percent3(t);
            percent4(newEntry) <- percent4(t);
            type(newEntry) <- type(t);
            descriptionText(newEntry) <- descriptionText(t);
            brigadier(newEntry) <- brigadier(t);
        }
    }
    IF employee3(t) AND percent3(t) > 0 THEN {
        NEW newEntry = TimeEntry {
            date(newEntry) <- date(t);
            project(newEntry) <- project(t);
            employee(newEntry) <- employee3(t);
            event(newEntry) <- event(t);
            employee2(newEntry) <- employee(t);
            employee3(newEntry) <- employee2(t);
            employee4(newEntry) <- employee4(t);
            percent(newEntry) <- percent3(t);
            percent2(newEntry) <- percent(t);
            percent3(newEntry) <- percent2(t);
            percent4(newEntry) <- percent4(t);
            type(newEntry) <- type(t);
            descriptionText(newEntry) <- descriptionText(t);
            brigadier(newEntry) <- brigadier(t);
        }
    }
    IF employee4(t) AND percent4(t) > 0 THEN {
        NEW newEntry = TimeEntry {
            date(newEntry) <- date(t);
            project(newEntry) <- project(t);
            employee(newEntry) <- employee4(t);
            event(newEntry) <- event(t);
            employee2(newEntry) <- employee(t);
            employee3(newEntry) <- employee2(t);
            employee4(newEntry) <- employee3(t);
            percent(newEntry) <- percent4(t);
            percent2(newEntry) <- percent(t);
            percent3(newEntry) <- percent2(t);
            percent4(newEntry) <- percent3(t);
            type(newEntry) <- type(t);
            descriptionText(newEntry) <- descriptionText(t);
            brigadier(newEntry) <- brigadier(t);
        }
    }
}

// Копирование записей для дополнительных сотрудников при создании новой отметки времени
WHEN SET(TimeEntry t IS TimeEntry) DO {
    copyTimeEntryForAdditionalEmployees(t);  // Выполняем копирование для дополнительных сотрудников
}





// Форма TimeEntry с отображением строк и суммы
EXTEND FORM timeEntry
    PROPERTIES(t)
    percent READONLY,
        nameEmployee2, percent2,
        nameEmployee3, percent3,
        nameEmployee4, percent4,
        descriptionText,
        totalWorkHours,  // Отображение общего количества часов
        nameBrigadier READONLY,
        totalWage,
        event
    OBJECTS l = SharedTimeEntryLine
    PROPERTIES(l) NEW, DELETE, nameWorkType, quantity, price, totalCost
    FILTERS event(l) = event(t) OR (event(t) == NULL)
    OBJECTS w = WorkEntryLine
    PROPERTIES(w) NEW, DELETE, startTime, endTime, description, workHours
    FILTERS workEvent(w) = event(t) OR (event(t) == NULL)
    
EVENTS
    ON INIT {
        assignEvent(t);  // Создаем событие при открытии формы
    };

// DESIGN формы timeEntry
DESIGN timeEntry {
    OBJECTS {
        MOVE pane {
            REMOVE PROPERTY(hours(t)); // Удалили старую логику часов
            REMOVE PROPERTY(nameTimeEntryHours(t));
            REMOVE PROPERTY(description(t));

            // Панель для первого сотрудника и процента
            NEW employeeAndPercentPane1 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee(t)) {
                    captionWidth = 100;
                    valueWidth = 145;
                    alignment = START;
                    caption = IF brigadier(t) = employee(t) THEN 'Бригадир' ELSE 'Сотрудник 1';
                }
                MOVE PROPERTY(percent(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 55;
                    alignment = START;
                }
            }

            // Панель для второго сотрудника и процента
            NEW employeeAndPercentPane2 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee2(t)) {
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(percent2(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 50;
                    alignment = START;
                }
            }

            // Панель для третьего сотрудника и процента
            NEW employeeAndPercentPane3 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee3(t)) {
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(percent3(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 50;
                    alignment = START;
                }
            }

            // Панель для четвертого сотрудника и процента
            NEW employeeAndPercentPane4 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee4(t)) {
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(percent4(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 50;
                    alignment = START;
                }
            }

            // Панель для ввода общего количества часов
            NEW hoursPane {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(totalWorkHours(t)) {  // Новое свойство для отображения суммы часов
                    caption = 'Часов';
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = CENTER;
                }
            }

            // Панель для даты и типа записи
            NEW dateAndTypePane {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(date(t)) {
                    caption = 'Дата';
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(nameType(t)) {
                    caption = 'Тип';
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
            }

            // Поле для описания работы
            MOVE PROPERTY(descriptionText(t)) {
                captionWidth = 100;
                valueWidth = 450;
                charWidth = 40;
                charHeight = 5;
                alignment = STRETCH;
                flex = 1;
            }

            // Панель для строк вида работ
            MOVE BOX(w) {
                caption = 'Вид работ';
                PROPERTY(startTime(w)) {
                    caption = 'Начало';
                    captionWidth = 50;
                    valueWidth = 50;
                    height = 25;
                }
                PROPERTY(endTime(w)) {
                    caption = 'Окончание';
                    captionWidth = 50;
                    valueWidth = 50;
                    height = 25;
                }
                PROPERTY(description(w)) {
                    caption = 'Описание';
                    captionWidth = 150;
                    valueWidth = 300;
                    charHeight = 1;
                    height = 25;
                }
                PROPERTY(workHours(w)) {
                    caption = 'Часы работы';  // Поле для ввода количества часов работы
                    captionWidth = 100;
                    valueWidth = 100;
                    height = 25;
                }
            }

            // Панель для отображения информации о зарплате
            MOVE BOX(l) {
                caption = 'Зарплата';
                PROPERTY(nameWorkType(l)) { notNull = TRUE; }
                PROPERTY(quantity(l)) { caption = 'Количество'; }
                PROPERTY(price(l)) { caption = 'Цена'; }
                PROPERTY(totalCost(l)) { caption = 'Общая стоимость'; }
            }

            // Отображение события
            MOVE PROPERTY(event(t)) {
                caption = 'Событие';
                captionWidth = 100;
                valueWidth = 150;
            }

            // Отображение общей суммы по зарплате
            MOVE PROPERTY(totalWage(t)) {
                caption = 'Итого ФОТ';
                captionWidth = 100;
                valueWidth = 150;
                alignment = END;
            }
        }
    }
}
