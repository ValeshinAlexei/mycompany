MODULE TimesheetSupervisorCopy;

REQUIRE DateUtils, ProjectManagementSettings, Employee, Timesheet,
        ProjectTimeEntry, ProjectAssignment, TimeEntryHours, TimeEntryExtensions, Security;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

// Свойство для получения всех зарплатных сумм за день по каждому сотруднику
salaryList 'Список зарплат' (Employee e, DATE d) =
    GROUP SUM totalSalary(e, d);

// Свойство для подсчета суммы зарплаты за выбранный период
salaryTotal 'Сумма зарплаты за период' (Employee e, INTERVAL[DATE] dates) =
    ROUND(GROUP SUM salaryList(e, d) IF d >= from(dates) AND d <= to(dates));

// Свойство для подсчета часов за выбранный период
hoursTotal 'Часы за период' (Employee e, INTERVAL[DATE] dates) =
    GROUP SUM hoursTimesheet(d, e) IF d >= from(dates) AND d <= to(dates);

// Свойство для отображения часов: если данных нет, возвращаем "0"
hoursDisplay 'Отображаемые часы' (Employee e, DATE d) =
    IF hoursTimesheet(d, e) THEN STRING(hoursTimesheet(d, e)) ELSE '0';

// Свойство для отображения зарплаты: если данных нет, возвращаем "0"
salaryDisplay 'Отображаемая зарплата' (Employee e, DATE d) =
    IF salaryList(e, d) THEN STRING(salaryList(e, d)) ELSE '0';

// Свойство для проверки наличия отметки времени
existsTimeEntry 'Отметка времени существует' (Employee e, DATE d) =
    GROUP SUM 1 IF timeEntry(d, e);


// Объединяющее свойство для отображения в ячейке "Часы / Зарплата"
summary 'Часы / Зарплата' (Employee e, DATE d) =
    IF existsTimeEntry(e, d) THEN
        STRING(IF hoursTimesheet(d, e) THEN hoursTimesheet(d, e) ELSE 0) + ' ч / ' +
            STRING(ROUND(IF salaryList(e, d) THEN salaryList(e, d) ELSE 0, 0)) + ' ₽'
    ELSE
        NULL;





// Проверяем, является ли текущий пользователь администратором
isAdmin 'Администратор?' (User u) =
    GROUP SUM 1 IF (userRoles(u) = 'Администратор' OR userRoles(u) = 'admin');

// Копия формы Supervisor timesheet
FORM timesheetSupervisorCopy 'Зарплатный Табель'
    OBJECTS dates = INTERVAL[DATE] PANEL NULL
    PROPERTIES dates '' = VALUE(dates)

    PROPERTIES() nameTimesheetProject, nameTimesheetTimeEntryType SELECT 'buttonGroup',
        nameTimesheetTimeEntryHours SHOWIF timesheetTimeEntryType() AND countHours(timesheetTimeEntryType()) SELECT 'buttonGroup'

    PROPERTIES READONLY hoursTimesheet(dates)

    OBJECTS d = DATE
    FILTERS iterate(d, from(dates), to(dates))

    // Отображаем всех сотрудников для администратора, а для обычных пользователей — только их записи
    OBJECTS e = Employee
    FILTERS IF isAdmin(currentUser()) THEN TRUE ELSE e = currentUser()

    PROPERTIES(e) READONLY firstName, lastName, namePosition
    PROPERTIES salaryTotal(e, dates) READONLY, hoursTotal(e, dates) READONLY
    PROPERTIES summary(e, d) WAIT COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, e)

    // Вызов формы при изменении значения (аналогично оригиналу)
    ON CHANGE {
        FOR TimeEntryType et = timesheetTimeEntryType() AND (timesheetProject() OR NOT project(timeEntry(d, e, timesheetTimeEntryType()))) DO {
            IF NOT timesheetTimeEntryHours() THEN {
                INPUT n = hoursTimesheet(d, e) DO {
                    changeSaveTimesheetHours(d, e, et, n, NULL, autoSaveTimesheetHours());
                }
            } ELSE
                changeSaveTimesheetHours(d, e, et, hours(timesheetTimeEntryHours()), timesheetTimeEntryHours(), autoSaveTimesheetHours());
        } ELSE
        SHOW timesheetSupervisorDateEmployee OBJECTS i = interval(d, d), e = e FLOAT;
    }

    // Контекстное меню для дополнительных действий (аналогично оригиналу)
    ON CONTEXTMENU copyHours(d) ON CONTEXTMENU clearHours(d)

    PROPERTIES prevInterval '<' = { SEEK timesheetSupervisorCopy.dates = prevMonthInterval(dates); },
        nextInterval '>' = { SEEK timesheetSupervisorCopy.dates = nextMonthInterval(dates); }
;

// Оформление копии формы timesheetSupervisorCopy
DESIGN timesheetSupervisorCopy {
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            horizontal = TRUE;
            NEW interval {
                horizontal = TRUE;
                MOVE PROPERTY(prevInterval);
                MOVE PROPERTY(dates);
                MOVE PROPERTY(nextInterval);
            }
            MOVE PROPERTY(nameTimesheetProject());
            MOVE PROPERTY(hoursTimesheet(dates));
        }
        NEW tabbedPane {
            tabbed = TRUE;
            fill = 1;
            NEW timesheet {
                caption = 'Timesheet';
                NEW edit {
                    horizontal = TRUE;
                    MOVE PROPERTY(nameTimesheetTimeEntryType()) {
                        caption = '';
                        placeholder = 'Type';
                    }
                    MOVE PROPERTY(nameTimesheetTimeEntryHours()) {
                        caption = '';
                        placeholder = 'Hours';
                    }
                }
                MOVE BOX(e) {
                    caption = '';
                    grid = TRUE;  // Добавляем отображение в виде сетки
                    lines = 1;  // Устанавливаем количество линий в сетке (для выделения)
                    PROPERTY(summary(e, d)) {
                        width = 100;
                        height = 40;
                        charWidth = 10;
                        charHeight = 5;
                        fontSize = 14;
                        foreground = RGB(0, 0, 0);  // Черный цвет текста
                        valueTooltip = 'Тип: ' + nameType(timeEntry(d, e));  // Добавляем подсказку
                    }
                }
            }
        }
    }
}



// Навигатор для копии формы
NAVIGATOR {
    NEW FOLDER salary 'Зарплата' WINDOW toolbar FIRST {
        NEW FORM timesheetSupervisorCopy;
    }
}

// Логика для установки значений при изменении типа отметки времени
WHEN LOCAL FORMS timesheetSupervisorCopy CHANGED(timesheetTimeEntryType()) DO
    timesheetTimeEntryHours() <- defaultHours(timesheetTimeEntryType());
