MODULE TimesheetSupervisorCopy;

REQUIRE DateUtils, ProjectManagementSettings, Employee, Timesheet,
        ProjectTimeEntry, ProjectAssignment, TimeEntryHours, TimeEntryExtensions, Security;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

// Свойство для получения всех зарплатных сумм за день по каждому сотруднику
salaryList 'Список зарплат' (Employee e, DATE d) =
    GROUP SUM totalSalary(e, d); // Используем свойство из TimeEntryExtensions

// Новое свойство для объединения часов и зарплаты в одну строку
summary 'Часы / Зарплата' (Employee e, DATE d) = hoursTimesheet(d, e) + 'ч' + '/' + ROUND(salaryList(e, d)) + ' ₽';

// Проверяем, является ли текущий пользователь администратором
isAdmin 'Администратор?' (User u) = GROUP SUM 1 IF Security.userRoles(u) = 'admin';

// Копия формы Supervisor timesheet
FORM timesheetSupervisorCopy 'Зарплатный Табель'
    OBJECTS dates = INTERVAL[DATE] PANEL NULL
    PROPERTIES dates '' = VALUE(dates)

    PROPERTIES() nameTimesheetProject, nameTimesheetTimeEntryType SELECT 'buttonGroup',
        nameTimesheetTimeEntryHours SHOWIF timesheetTimeEntryType() AND countHours(timesheetTimeEntryType()) SELECT 'buttonGroup'

    PROPERTIES READONLY hoursTimesheet(dates)

    OBJECTS d = DATE
    FILTERS iterate(d, from(dates), to(dates))

    // Отображаем только данные для текущего пользователя
    OBJECTS e = Employee
    // Проверяем, если текущий пользователь НЕ администратор, то применяем фильтр
    FILTERS IF NOT isAdmin(currentUser()) THEN e = currentUser()

    PROPERTIES(e) READONLY firstName, lastName, namePosition, rolesTimesheet
    PROPERTIES summary(e, d) WAIT COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, e)

    // Логика открытия формы с отметками при нажатии на ячейку
    ON CHANGE {
        FOR TimeEntryType et = timesheetTimeEntryType() AND
            (timesheetProject() OR NOT project(timeEntry(d, e, et))) DO {
            IF NOT timesheetTimeEntryHours() THEN {
                INPUT n = hoursTimesheet(d, e) DO {
                    changeSaveTimesheetHours(d, e, et, n, NULL, autoSaveTimesheetHours());
                }
            } ELSE {
                changeSaveTimesheetHours(d, e, et, hours(timesheetTimeEntryHours()), timesheetTimeEntryHours(), autoSaveTimesheetHours());
            }
        } ELSE {
            // Вызов формы с отметками времени
            SHOW timesheetSupervisorDateEmployee OBJECTS i = interval(d, d), e = e FLOAT;
        }
    }

    ON CONTEXTMENU copyHours(d) ON CONTEXTMENU clearHours(d) FOOTER hours(d, timesheetProject())

    // Фильтры для отображения только тех сотрудников, которые назначены на проект
    // FILTERS assigned(timesheetProject(), e, dates) OR
    //  (NOT countAssignments(timesheetProject()) AND NOT countAssignments(currentUser()))


    EVENTS ON INIT {
        timesheetProject() <- defaultProject(currentUser());
        timesheetTimeEntryType() <- defaultTimeEntryType();
        SEEK timesheetSupervisorCopy.dates = interval(firstDayOfMonth(currentDate()), lastDayOfMonth(currentDate()));
    }
    PROPERTIES prevInterval '<' = { SEEK timesheetSupervisorCopy.dates = prevMonthInterval(dates); },
        nextInterval '>' = { SEEK timesheetSupervisorCopy.dates = nextMonthInterval(dates); }
;

// Оформление копии формы timesheetSupervisorCopy
DESIGN timesheetSupervisorCopy {
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            horizontal = TRUE;
            NEW interval {
                horizontal = TRUE;
                MOVE PROPERTY(prevInterval);
                MOVE PROPERTY(dates);
                MOVE PROPERTY(nextInterval);
            }
            MOVE PROPERTY(nameTimesheetProject());
            MOVE PROPERTY(hoursTimesheet(dates));
        }
        NEW tabbedPane {
            tabbed = TRUE;
            fill = 1;
            NEW timesheet {
                caption = 'Timesheet';
                NEW edit {
                    horizontal = TRUE;
                    MOVE PROPERTY(nameTimesheetTimeEntryType()) {
                        caption = '';
                        placeholder = 'Type';
                    }
                    MOVE PROPERTY(nameTimesheetTimeEntryHours()) {
                        caption = '';
                        placeholder = 'Hours';
                    }
                }
                MOVE BOX(e) {
                    caption = '';
                    PROPERTY(summary(e, d)) {
                        width = 200;
                        height = 40;
                        charWidth = 10;
                        charHeight = 5;
                    }
                }
            }
        }
    }
}

// Навигатор для копии формы
NAVIGATOR {
    NEW FOLDER salary 'Зарплата' WINDOW toolbar FIRST {
        NEW FORM timesheetSupervisorCopy;
    }
}

WHEN LOCAL FORMS timesheetSupervisorCopy CHANGED(timesheetTimeEntryType()) DO
    timesheetTimeEntryHours() <- defaultHours(timesheetTimeEntryType());
