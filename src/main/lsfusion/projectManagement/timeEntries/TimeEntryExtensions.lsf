MODULE TimeEntryExtensions;

REQUIRE TimeEntry, Project, ProjectTimeEntry, TimeEntryHours, ItemSales, Employee, Category, ItemCost;

NAMESPACE ProjectManagement;

// Добавляем поля для процентов и дополнительных сотрудников
percent 'Процент' = DATA NUMERIC[5,2] (TimeEntry);
employee2 'Сотрудник 2' = DATA Employee (TimeEntry);
percent2 'Процент 2' = DATA NUMERIC[5,2] (TimeEntry) NONULL;
employee3 'Сотрудник 3' = DATA Employee (TimeEntry);
percent3 'Процент 3' = DATA NUMERIC[5,2] (TimeEntry) NONULL;
employee4 'Сотрудник 4' = DATA Employee (TimeEntry);
percent4 'Процент 4' = DATA NUMERIC[5,2] (TimeEntry) NONULL;

// Уникальные имена для дополнительных сотрудников
nameEmployee2 'Сотрудник 2' (TimeEntry t) = MasterData.name(employee2(t));
nameEmployee3 'Сотрудник 3' (TimeEntry t) = MasterData.name(employee3(t));
nameEmployee4 'Сотрудник 4' (TimeEntry t) = MasterData.name(employee4(t));

// Поле descriptionText
descriptionText 'Описание' = DATA TEXT (TimeEntry);

// Новый класс для строк отметки времени
CLASS TimeEntryLine;

// Связь строки отметки времени с основной записью отметки времени
timeEntry = DATA TimeEntry (TimeEntryLine) NONULL DELETE;

// Вид работ (номенклатура)
workType 'Вид работ' = DATA Item (TimeEntryLine) NONULL;
nameWorkType 'Вид работ' (TimeEntryLine l) = MasterData.name(workType(l));

// Количество (например, количество единиц работы)
quantity 'Количество' = DATA NUMERIC[16,3] (TimeEntryLine);

// Цена за единицу работы (подтягивается из себестоимости)
price 'Цена' = DATA NUMERIC[10,2] (TimeEntryLine);

// Общая стоимость строки (количество * цена)
totalCost 'Общая стоимость' (TimeEntryLine l) = quantity(l) * price(l);

// Логика для присвоения плановой себестоимости
defaultPrice 'Цена по умолчанию' (TimeEntryLine l) =
    CASE
        WHEN cost(workType(l), currentDate()) THEN cost(workType(l), currentDate())  // Если себестоимость указана, используем её
        ELSE 100;  // Цена по умолчанию для всех остальных видов работ

// Присваиваем себестоимость по умолчанию при выборе вида работ
WHEN LOCAL SETCHANGED(workType(TimeEntryLine l)) AND NOT CHANGED(price(l)) DO
    price(l) <- defaultPrice(l);

// Общая сумма по всем позициям (Итого ФОТ)
totalWage 'Итого ФОТ' (TimeEntry t) = GROUP SUM totalCost(TimeEntryLine l) BY timeEntry(l);

// Проверка на уникальность сотрудников в записи времени
CONSTRAINT
    employee2(t) = employee(t) OR
        employee3(t) = employee(t) OR employee3(t) = employee2(t) OR
        employee4(t) = employee(t) OR employee4(t) = employee2(t) OR employee4(t) = employee3(t)
    MESSAGE 'Сотрудники не могут быть одинаковыми в одной записи времени';

// Проверка: сумма процентов сотрудников 2, 3 и 4 не должна превышать 100%
CONSTRAINT percent2(t) + percent3(t) + percent4(t) > 100
    MESSAGE 'Сумма процентов для сотрудников 2, 3 и 4 не может превышать 100%';

// Процент для первого сотрудника. Если поля сотрудников 2, 3 или 4 изменяются, процент обновляется.
percent(t) <- 100 - (percent2(t) + percent3(t) + percent4(t))
    WHEN NOT (percent2(t) == NULL OR percent3(t) == NULL OR percent4(t) == NULL)
    AND (CHANGED(percent2(t)) OR CHANGED(percent3(t)) OR CHANGED(percent4(t)));

// Удаляем логику автоматического суммирования и делаем поле totalHours редактируемым
totalHours 'Часов' = DATA NUMERIC[16,3] (TimeEntry);
// Присваиваем время старому свойству
hours(TimeEntry t) <- totalHours(t) WHEN CHANGED(totalHours(t));

// Инициализация процентов сотрудников 2, 3, 4 при создании новой записи
percent2(TimeEntry t) <- 0 WHEN SET(t IS TimeEntry);
percent3(TimeEntry t) <- 0 WHEN SET(t IS TimeEntry);
percent4(TimeEntry t) <- 0 WHEN SET(t IS TimeEntry);

// Поле для хранения сотрудника, который является "Бригадиром"
brigadier 'Бригадир' = DATA Employee (TimeEntry);

// Автоматическое назначение бригадира: бригадир всегда равен первому сотруднику
brigadier(TimeEntry t) <- employee(t) WHEN CHANGED(employee(t));

// Вычисляемое свойство для отображения имени бригадира
nameBrigadier 'Бригадир' (TimeEntry t) = MasterData.name(brigadier(t));

// Формы
EXTEND FORM timeEntry
    PROPERTIES(t) percent, nameEmployee2, percent2, nameEmployee3, percent3, nameEmployee4, percent4, descriptionText, totalHours, nameBrigadier READONLY, totalWage // Убрано дублирование поля project
    OBJECTS l = TimeEntryLine
    PROPERTIES(l) nameWorkType, quantity, price, totalCost // Добавили себестоимость и общую стоимость
    PROPERTIES(l) NEW, DELETE
    FILTERS timeEntry(l) = t;

// Оформление формы
DESIGN timeEntry {
    OBJECTS {
        MOVE pane {
            REMOVE PROPERTY(hours(t));
            REMOVE PROPERTY(nameTimeEntryHours(t));
            REMOVE PROPERTY(description(t));

            // Сотрудник 1 и процент
            NEW employeeAndPercentPane1 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee(t)) {
                    captionWidth = 100;
                    valueWidth = 145;
                    alignment = START;
                    caption = IF brigadier(t) = employee(t) THEN 'Бригадир' ELSE 'Сотрудник 1'; // Отображаем "Бригадир", если сотрудник создатель
                }
                MOVE PROPERTY(percent(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 55;
                    alignment = START;
                }
            }

            // Сотрудник 2 и процент
            NEW employeeAndPercentPane2 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee2(t)) {
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(percent2(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 50;
                    alignment = START;
                }
            }

            // Сотрудник 3 и процент
            NEW employeeAndPercentPane3 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee3(t)) {
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(percent3(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 50;
                    alignment = START;
                }
            }

            // Сотрудник 4 и процент
            NEW employeeAndPercentPane4 {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(nameEmployee4(t)) {
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(percent4(t)) {
                    caption = '%';
                    captionWidth = 20;
                    valueWidth = 50;
                    alignment = START;
                }
            }

            // Суммарные часы теперь доступны для ввода пользователем
            NEW hoursPane {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(totalHours(t)) {
                    caption = 'Часов';
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = CENTER;
                }
            }

            // Дата и тип
            NEW dateAndTypePane {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(date(t)) {
                    caption = 'Дата';
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
                MOVE PROPERTY(nameType(t)) {
                    caption = 'Тип';
                    captionWidth = 100;
                    valueWidth = 150;
                    alignment = START;
                }
            }

            // Описание
            MOVE PROPERTY(descriptionText(t)) {
                captionWidth = 100;
                valueWidth = 450;
                charWidth = 40;
                charHeight = 5;
                alignment = STRETCH;
                flex = 1;
            }

            // Панель для строк
            NEW workEntry {
                caption = 'Вид работ';
                alignment = STRETCH;
                MOVE BOX(l) {
                    PROPERTY(nameWorkType(l)) { notNull = TRUE; }
                    PROPERTY(quantity(l)) { caption = 'Количество'; }
                    PROPERTY(price(l)) { caption = 'Цена'; }
                    PROPERTY(totalCost(l)) { caption = 'Общая стоимость'; }
                }
            }

            // Добавляем строку с итоговой суммой
            NEW totalWagePane {
                horizontal = TRUE;
                alignment = END;
                MOVE PROPERTY(totalWage(t)) {
                    caption = 'Итого ФОТ';
                    captionWidth = 100;
                    valueWidth = 150;
                }
            }
        }
    }
}

// Процедура для копирования записи для дополнительных сотрудников
copyTimeEntryForAdditionalEmployees (TimeEntry t) {
    IF employee2(t) AND percent2(t) > 0 THEN {
        NEW newEntry = TimeEntry {
            date(newEntry) <- date(t);
            project(newEntry) <- project(t);  // Копируем проект
            totalHours(newEntry) <- totalHours(t);  // Оставляем такое же количество часов
            employee(newEntry) <- employee2(t);  // Устанавливаем сотрудника
            employee2(newEntry) <- employee(t);  // Сохраняем сотрудника 1
            type(newEntry) <- type(t);
            description(newEntry) <- descriptionText(t);
            brigadier(newEntry) <- brigadier(t);  // Сохраняем бригадира
            percent2(newEntry) <- percent(t);
            percent(newEntry) <- percent2(t);
            employee3(newEntry) <- employee3(t);
            percent3(newEntry) <- percent3(t);
            employee4(newEntry) <- employee4(t);
            percent4(newEntry) <- percent4(t);

            // Копируем строки номенклатуры для сотрудника 2
            FOR timeEntry(TimeEntryLine l) = t INLINE NEW newLine = TimeEntryLine DO {
                timeEntry(newLine) <- newEntry;        // Привязываем строку к новой записи
                workType(newLine) <- workType(l);      // Копируем номенклатуру (вид работы)
                quantity(newLine) <- quantity(l);      // Копируем количество
                price(newLine) <- price(l);            // Копируем себестоимость
            }
        }
    }

    IF employee3(t) AND percent3(t) > 0 THEN {
        NEW newEntry = TimeEntry {
            date(newEntry) <- date(t);
            project(newEntry) <- project(t);  // Копируем проект
            totalHours(newEntry) <- totalHours(t);  // Оставляем такое же количество часов
            employee(newEntry) <- employee3(t);  // Устанавливаем сотрудника
            employee3(newEntry) <- employee(t);
            type(newEntry) <- type(t);
            description(newEntry) <- descriptionText(t);
            brigadier(newEntry) <- brigadier(t);
            percent3(newEntry) <- percent(t);
            percent(newEntry) <- percent3(t);
            employee2(newEntry) <- employee2(t);
            percent2(newEntry) <- percent2(t);
            employee4(newEntry) <- employee4(t);
            percent4(newEntry) <- percent4(t);

            // Копируем строки номенклатуры для сотрудника 3
            FOR timeEntry(TimeEntryLine l) = t INLINE NEW newLine = TimeEntryLine DO {
                timeEntry(newLine) <- newEntry;
                workType(newLine) <- workType(l);
                quantity(newLine) <- quantity(l);
                price(newLine) <- price(l);            // Копируем себестоимость
            }
        }
    }

    IF employee4(t) AND percent4(t) > 0 THEN {
        NEW newEntry = TimeEntry {
            date(newEntry) <- date(t);
            project(newEntry) <- project(t);  // Копируем проект
            totalHours(newEntry) <- totalHours(t);  // Оставляем такое же количество часов
            employee(newEntry) <- employee4(t);  // Устанавливаем сотрудника
            employee4(newEntry) <- employee(t);
            type(newEntry) <- type(t);
            description(newEntry) <- descriptionText(t);
            brigadier(newEntry) <- brigadier(t);
            percent4(newEntry) <- percent(t);
            percent(newEntry) <- percent4(t);
            employee2(newEntry) <- employee2(t);
            percent2(newEntry) <- percent2(t);
            employee3(newEntry) <- employee3(t);
            percent3(newEntry) <- percent3(t);

            // Копируем строки номенклатуры для сотрудника 4
            FOR timeEntry(TimeEntryLine l) = t INLINE NEW newLine = TimeEntryLine DO {
                timeEntry(newLine) <- newEntry;
                workType(newLine) <- workType(l);
                quantity(newLine) <- quantity(l);
                price(newLine) <- price(l);            // Копируем себестоимость
            }
        }
    }
}

// Автоматическое создание записей для сотрудников 2, 3 и 4 после создания основной записи
WHEN CHANGED(employee(t)) OR CHANGED(totalHours(t)) DO {
    copyTimeEntryForAdditionalEmployees(t);
}
